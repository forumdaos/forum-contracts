/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FieldGeneratorInterface extends ethers.utils.Interface {
  functions: {
    "_colors(uint24)": FunctionFragment;
    "addColors(uint24[],string[])": FunctionFragment;
    "colorExists(uint24)": FunctionFragment;
    "colorTitle(uint24)": FunctionFragment;
    "generateField(uint16,uint24[4])": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_colors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addColors",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "colorExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "colorTitle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateField",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(functionFragment: "_colors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addColors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "colorExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "colorTitle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "ColorsAdded(uint24,uint24,uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ColorsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export type ColorsAddedEvent = TypedEvent<
  [number, number, BigNumber] & {
    firstColor: number;
    lastColor: number;
    count: BigNumber;
  }
>;

export type OwnerUpdatedEvent = TypedEvent<
  [string, string] & { user: string; newOwner: string }
>;

export class FieldGenerator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FieldGeneratorInterface;

  functions: {
    _colors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { title: string; exists: boolean }>;

    addColors(
      __colors: BigNumberish[],
      titles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    colorExists(
      color: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    colorTitle(
      color: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateField(
      field: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, string] & {
          title: string;
          fieldType: number;
          svgString: string;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _colors(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { title: string; exists: boolean }>;

  addColors(
    __colors: BigNumberish[],
    titles: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  colorExists(color: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  colorTitle(color: BigNumberish, overrides?: CallOverrides): Promise<string>;

  generateField(
    field: BigNumberish,
    colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<
    [string, number, string] & {
      title: string;
      fieldType: number;
      svgString: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _colors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { title: string; exists: boolean }>;

    addColors(
      __colors: BigNumberish[],
      titles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    colorExists(
      color: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    colorTitle(color: BigNumberish, overrides?: CallOverrides): Promise<string>;

    generateField(
      field: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & {
        title: string;
        fieldType: number;
        svgString: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ColorsAdded(uint24,uint24,uint256)"(
      firstColor?: null,
      lastColor?: null,
      count?: null
    ): TypedEventFilter<
      [number, number, BigNumber],
      { firstColor: number; lastColor: number; count: BigNumber }
    >;

    ColorsAdded(
      firstColor?: null,
      lastColor?: null,
      count?: null
    ): TypedEventFilter<
      [number, number, BigNumber],
      { firstColor: number; lastColor: number; count: BigNumber }
    >;

    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;
  };

  estimateGas: {
    _colors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addColors(
      __colors: BigNumberish[],
      titles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    colorExists(
      color: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    colorTitle(
      color: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateField(
      field: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _colors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addColors(
      __colors: BigNumberish[],
      titles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    colorExists(
      color: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    colorTitle(
      color: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateField(
      field: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
