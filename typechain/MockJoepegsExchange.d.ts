/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockJoepegsExchangeInterface extends ethers.utils.Interface {
  functions: {
    "matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "matchAskWithTakerBidUsingAVAXAndWAVAX((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "matchAskWithTakerBid",
    values: [
      {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchAskWithTakerBidUsingAVAXAndWAVAX",
    values: [
      {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchBidWithTakerAsk",
    values: [
      {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "matchAskWithTakerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchAskWithTakerBidUsingAVAXAndWAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchBidWithTakerAsk",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockJoepegsExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockJoepegsExchangeInterface;

  functions: {
    matchAskWithTakerBid(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchAskWithTakerBidUsingAVAXAndWAVAX(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchBidWithTakerAsk(
      takerAsk: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerBid: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  matchAskWithTakerBid(
    takerBid: {
      isOrderAsk: boolean;
      taker: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
    },
    makerAsk: {
      isOrderAsk: boolean;
      signer: string;
      collection: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      strategy: string;
      currency: string;
      nonce: BigNumberish;
      startTime: BigNumberish;
      endTime: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchAskWithTakerBidUsingAVAXAndWAVAX(
    takerBid: {
      isOrderAsk: boolean;
      taker: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
    },
    makerAsk: {
      isOrderAsk: boolean;
      signer: string;
      collection: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      strategy: string;
      currency: string;
      nonce: BigNumberish;
      startTime: BigNumberish;
      endTime: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchBidWithTakerAsk(
    takerAsk: {
      isOrderAsk: boolean;
      taker: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
    },
    makerBid: {
      isOrderAsk: boolean;
      signer: string;
      collection: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      strategy: string;
      currency: string;
      nonce: BigNumberish;
      startTime: BigNumberish;
      endTime: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    matchAskWithTakerBid(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    matchAskWithTakerBidUsingAVAXAndWAVAX(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    matchBidWithTakerAsk(
      takerAsk: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerBid: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    matchAskWithTakerBid(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchAskWithTakerBidUsingAVAXAndWAVAX(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchBidWithTakerAsk(
      takerAsk: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerBid: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    matchAskWithTakerBid(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchAskWithTakerBidUsingAVAXAndWAVAX(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchBidWithTakerAsk(
      takerAsk: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerBid: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
