/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DelegatorInterface extends ethers.utils.Interface {
  functions: {
    "DELEGATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "balanceTracker(address,address)": FunctionFragment;
    "callExtension(address,uint256,bytes)": FunctionFragment;
    "checkpoints(address,address,uint256)": FunctionFragment;
    "delegate(address,address)": FunctionFragment;
    "delegateBySig(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address,address)": FunctionFragment;
    "getCurrentVotes(address,address)": FunctionFragment;
    "getPriorVotes(address,address,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numCheckpoints(address,address)": FunctionFragment;
    "setExtension(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceTracker",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callExtension",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtension",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtension",
    data: BytesLike
  ): Result;

  events: {
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "ExtensionCalled(address,address,address,uint256,uint8)": EventFragment;
    "ExtensionSet(address,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionSet"): EventFragment;
}

export type DelegateChangedEvent = TypedEvent<
  [string, string, string] & {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
>;

export type DelegateVotesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    delegate: string;
    previousBalance: BigNumber;
    newBalance: BigNumber;
  }
>;

export type ExtensionCalledEvent = TypedEvent<
  [string, string, string, BigNumber, number] & {
    dao: string;
    from: string;
    to: string;
    amount: BigNumber;
    typeOfCall: number;
  }
>;

export type ExtensionSetEvent = TypedEvent<
  [string, string[]] & { dao: string; members: string[] }
>;

export class Delegator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DelegatorInterface;

  functions: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    balanceTracker(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    callExtension(
      sender: string,
      votesIn: BigNumberish,
      extensionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkpoints(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { fromTimestamp: number; votes: BigNumber }
    >;

    delegate(
      dao: string,
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateBySig(
      dao: string,
      delegator: string,
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegates(
      dao: string,
      delegator: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentVotes(
      dao: string,
      member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriorVotes(
      dao: string,
      member: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setExtension(
      extensionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  balanceTracker(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callExtension(
    sender: string,
    votesIn: BigNumberish,
    extensionData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkpoints(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { fromTimestamp: number; votes: BigNumber }>;

  delegate(
    dao: string,
    delegatee: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateBySig(
    dao: string,
    delegator: string,
    delegatee: string,
    nonce: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegates(
    dao: string,
    delegator: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentVotes(
    dao: string,
    member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriorVotes(
    dao: string,
    member: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setExtension(
    extensionData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    balanceTracker(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callExtension(
      sender: string,
      votesIn: BigNumberish,
      extensionData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { mint: boolean; amount: BigNumber }>;

    checkpoints(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { fromTimestamp: number; votes: BigNumber }
    >;

    delegate(
      dao: string,
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateBySig(
      dao: string,
      delegator: string,
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(
      dao: string,
      delegator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentVotes(
      dao: string,
      member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      dao: string,
      member: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExtension(
      extensionData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DelegateChanged(address,address,address)"(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { delegator: string; fromDelegate: string; toDelegate: string }
    >;

    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { delegator: string; fromDelegate: string; toDelegate: string }
    >;

    "DelegateVotesChanged(address,uint256,uint256)"(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }
    >;

    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }
    >;

    "ExtensionCalled(address,address,address,uint256,uint8)"(
      dao?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      typeOfCall?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        dao: string;
        from: string;
        to: string;
        amount: BigNumber;
        typeOfCall: number;
      }
    >;

    ExtensionCalled(
      dao?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      typeOfCall?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        dao: string;
        from: string;
        to: string;
        amount: BigNumber;
        typeOfCall: number;
      }
    >;

    "ExtensionSet(address,address[])"(
      dao?: string | null,
      members?: null
    ): TypedEventFilter<[string, string[]], { dao: string; members: string[] }>;

    ExtensionSet(
      dao?: string | null,
      members?: null
    ): TypedEventFilter<[string, string[]], { dao: string; members: string[] }>;
  };

  estimateGas: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    balanceTracker(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callExtension(
      sender: string,
      votesIn: BigNumberish,
      extensionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkpoints(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegate(
      dao: string,
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateBySig(
      dao: string,
      delegator: string,
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegates(
      dao: string,
      delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVotes(
      dao: string,
      member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      dao: string,
      member: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExtension(
      extensionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceTracker(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callExtension(
      sender: string,
      votesIn: BigNumberish,
      extensionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      dao: string,
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      dao: string,
      delegator: string,
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegates(
      dao: string,
      delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVotes(
      dao: string,
      member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      dao: string,
      member: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCheckpoints(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExtension(
      extensionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
