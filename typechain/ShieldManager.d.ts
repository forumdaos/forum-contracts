/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ShieldManagerInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_ALL_TYPEHASH()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buildAndDropShields(address[],tuple[])": FunctionFragment;
    "buildShield(uint16,uint16[9],uint16,uint24[4],uint256)": FunctionFragment;
    "collectERC20(address)": FunctionFragment;
    "collectFees()": FunctionFragment;
    "emblemWeaver()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintShieldPass(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(uint256)": FunctionFragment;
    "noncesForAll(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "permit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "permitAll(address,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "pfpStaker()": FunctionFragment;
    "preLaunchSupply()": FunctionFragment;
    "priceInfo()": FunctionFragment;
    "publicMintActive()": FunctionFragment;
    "roundtableFactory()": FunctionFragment;
    "roundtableRelay()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setEmblemWeaver(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPfpStaker(address)": FunctionFragment;
    "setPreLaunchSupply(uint256)": FunctionFragment;
    "setPublicMintActive(bool)": FunctionFragment;
    "setRoundtableFactory(address)": FunctionFragment;
    "setRoundtableRelay(address)": FunctionFragment;
    "setShieldItemPrices(uint256[],uint256[],uint256[])": FunctionFragment;
    "setShieldPassPrice(uint256)": FunctionFragment;
    "shieldHashes(bytes32)": FunctionFragment;
    "shields(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleItemWhitelist(address,uint8)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "whitelist(address,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_ALL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buildAndDropShields",
    values: [
      string[],
      {
        field: BigNumberish;
        hardware: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        frame: BigNumberish;
        colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        shieldHash: BytesLike;
        hardwareConfiguration: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buildShield",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emblemWeaver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintShieldPass",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "noncesForAll",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitAll",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pfpStaker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preLaunchSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicMintActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundtableFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundtableRelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmblemWeaver",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPfpStaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreLaunchSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicMintActive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundtableFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundtableRelay",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setShieldItemPrices",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setShieldPassPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shieldHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shields",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleItemWhitelist",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_ALL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buildAndDropShields",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildShield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emblemWeaver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintShieldPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "noncesForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permitAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pfpStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preLaunchSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundtableFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundtableRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmblemWeaver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPfpStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreLaunchSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoundtableFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoundtableRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShieldItemPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShieldPassPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shieldHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shields", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleItemWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MintingStatus(bool)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "ShieldBuilt(address,uint256,bytes32,bytes32,uint16,uint16[9],uint16,uint24[4])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShieldBuilt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type MintingStatusEvent = TypedEvent<[boolean] & { live: boolean }>;

export type OwnerUpdatedEvent = TypedEvent<
  [string, string] & { user: string; newOwner: string }
>;

export type ShieldBuiltEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    number,
    [number, number, number, number, number, number, number, number, number],
    number,
    [number, number, number, number]
  ] & {
    builder: string;
    tokenId: BigNumber;
    oldShieldHash: string;
    newShieldHash: string;
    field: number;
    hardware: [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ];
    frame: number;
    colors: [number, number, number, number];
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class ShieldManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ShieldManagerInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_ALL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    approve(
      spender: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buildAndDropShields(
      receivers: string[],
      shieldBatch: {
        field: BigNumberish;
        hardware: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        frame: BigNumberish;
        colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        shieldHash: BytesLike;
        hardwareConfiguration: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buildShield(
      field: BigNumberish,
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      frame: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectERC20(
      erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emblemWeaver(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintShieldPass(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    noncesForAll(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permitAll(
      owner: string,
      operator: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pfpStaker(overrides?: CallOverrides): Promise<[string]>;

    preLaunchSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        epicFieldFee_: BigNumber;
        heroicFieldFee_: BigNumber;
        olympicFieldFee_: BigNumber;
        legendaryFieldFee_: BigNumber;
        epicHardwareFee_: BigNumber;
        doubleHardwareFee_: BigNumber;
        multiHardwareFee_: BigNumber;
        adornedFrameFee_: BigNumber;
        menacingFrameFee_: BigNumber;
        securedFrameFee_: BigNumber;
        floriatedFrameFee_: BigNumber;
        everlastingFrameFee_: BigNumber;
      }
    >;

    publicMintActive(overrides?: CallOverrides): Promise<[boolean]>;

    roundtableFactory(overrides?: CallOverrides): Promise<[string]>;

    roundtableRelay(overrides?: CallOverrides): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmblemWeaver(
      emblemWeaver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPfpStaker(
      pfpStaker_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPreLaunchSupply(
      supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicMintActive(
      setting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoundtableFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoundtableRelay(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShieldItemPrices(
      fieldPrices: BigNumberish[],
      hardwarePrices: BigNumberish[],
      framePrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShieldPassPrice(
      _shieldPassPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shieldHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    shields(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        number,
        number,
        number,
        number,
        number
      ] & {
        field: number;
        hardware: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        frame: number;
        color1: number;
        color2: number;
        color3: number;
        color4: number;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleItemWhitelist(
      user: string,
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_ALL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  approve(
    spender: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  buildAndDropShields(
    receivers: string[],
    shieldBatch: {
      field: BigNumberish;
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      frame: BigNumberish;
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
      shieldHash: BytesLike;
      hardwareConfiguration: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buildShield(
    field: BigNumberish,
    hardware: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    frame: BigNumberish,
    colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectERC20(
    erc20: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emblemWeaver(overrides?: CallOverrides): Promise<string>;

  getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintShieldPass(
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  noncesForAll(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  permit(
    spender: string,
    tokenId: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permitAll(
    owner: string,
    operator: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pfpStaker(overrides?: CallOverrides): Promise<string>;

  preLaunchSupply(overrides?: CallOverrides): Promise<BigNumber>;

  priceInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      epicFieldFee_: BigNumber;
      heroicFieldFee_: BigNumber;
      olympicFieldFee_: BigNumber;
      legendaryFieldFee_: BigNumber;
      epicHardwareFee_: BigNumber;
      doubleHardwareFee_: BigNumber;
      multiHardwareFee_: BigNumber;
      adornedFrameFee_: BigNumber;
      menacingFrameFee_: BigNumber;
      securedFrameFee_: BigNumber;
      floriatedFrameFee_: BigNumber;
      everlastingFrameFee_: BigNumber;
    }
  >;

  publicMintActive(overrides?: CallOverrides): Promise<boolean>;

  roundtableFactory(overrides?: CallOverrides): Promise<string>;

  roundtableRelay(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmblemWeaver(
    emblemWeaver_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPfpStaker(
    pfpStaker_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPreLaunchSupply(
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicMintActive(
    setting: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoundtableFactory(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoundtableRelay(
    relay: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShieldItemPrices(
    fieldPrices: BigNumberish[],
    hardwarePrices: BigNumberish[],
    framePrices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShieldPassPrice(
    _shieldPassPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shieldHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  shields(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      [number, number, number, number, number, number, number, number, number],
      number,
      number,
      number,
      number,
      number
    ] & {
      field: number;
      hardware: [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ];
      frame: number;
      color1: number;
      color2: number;
      color3: number;
      color4: number;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleItemWhitelist(
    user: string,
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_ALL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    approve(
      spender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buildAndDropShields(
      receivers: string[],
      shieldBatch: {
        field: BigNumberish;
        hardware: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        frame: BigNumberish;
        colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        shieldHash: BytesLike;
        hardwareConfiguration: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    buildShield(
      field: BigNumberish,
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      frame: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectERC20(erc20: string, overrides?: CallOverrides): Promise<void>;

    collectFees(overrides?: CallOverrides): Promise<void>;

    emblemWeaver(overrides?: CallOverrides): Promise<string>;

    getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintShieldPass(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    noncesForAll(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    permitAll(
      owner: string,
      operator: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pfpStaker(overrides?: CallOverrides): Promise<string>;

    preLaunchSupply(overrides?: CallOverrides): Promise<BigNumber>;

    priceInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        epicFieldFee_: BigNumber;
        heroicFieldFee_: BigNumber;
        olympicFieldFee_: BigNumber;
        legendaryFieldFee_: BigNumber;
        epicHardwareFee_: BigNumber;
        doubleHardwareFee_: BigNumber;
        multiHardwareFee_: BigNumber;
        adornedFrameFee_: BigNumber;
        menacingFrameFee_: BigNumber;
        securedFrameFee_: BigNumber;
        floriatedFrameFee_: BigNumber;
        everlastingFrameFee_: BigNumber;
      }
    >;

    publicMintActive(overrides?: CallOverrides): Promise<boolean>;

    roundtableFactory(overrides?: CallOverrides): Promise<string>;

    roundtableRelay(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmblemWeaver(
      emblemWeaver_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setPfpStaker(pfpStaker_: string, overrides?: CallOverrides): Promise<void>;

    setPreLaunchSupply(
      supply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicMintActive(
      setting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoundtableFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoundtableRelay(relay: string, overrides?: CallOverrides): Promise<void>;

    setShieldItemPrices(
      fieldPrices: BigNumberish[],
      hardwarePrices: BigNumberish[],
      framePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setShieldPassPrice(
      _shieldPassPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shieldHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    shields(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        number,
        number,
        number,
        number,
        number
      ] & {
        field: number;
        hardware: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        frame: number;
        color1: number;
        color2: number;
        color3: number;
        color4: number;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleItemWhitelist(
      user: string,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "MintingStatus(bool)"(
      live?: null
    ): TypedEventFilter<[boolean], { live: boolean }>;

    MintingStatus(live?: null): TypedEventFilter<[boolean], { live: boolean }>;

    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    "ShieldBuilt(address,uint256,bytes32,bytes32,uint16,uint16[9],uint16,uint24[4])"(
      builder?: string | null,
      tokenId?: BigNumberish | null,
      oldShieldHash?: null,
      newShieldHash?: null,
      field?: null,
      hardware?: null,
      frame?: null,
      colors?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        string,
        number,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        number,
        [number, number, number, number]
      ],
      {
        builder: string;
        tokenId: BigNumber;
        oldShieldHash: string;
        newShieldHash: string;
        field: number;
        hardware: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        frame: number;
        colors: [number, number, number, number];
      }
    >;

    ShieldBuilt(
      builder?: string | null,
      tokenId?: BigNumberish | null,
      oldShieldHash?: null,
      newShieldHash?: null,
      field?: null,
      hardware?: null,
      frame?: null,
      colors?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        string,
        number,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        number,
        [number, number, number, number]
      ],
      {
        builder: string;
        tokenId: BigNumber;
        oldShieldHash: string;
        newShieldHash: string;
        field: number;
        hardware: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        frame: number;
        colors: [number, number, number, number];
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_ALL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buildAndDropShields(
      receivers: string[],
      shieldBatch: {
        field: BigNumberish;
        hardware: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        frame: BigNumberish;
        colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        shieldHash: BytesLike;
        hardwareConfiguration: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buildShield(
      field: BigNumberish,
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      frame: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectERC20(
      erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emblemWeaver(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintShieldPass(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    noncesForAll(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permitAll(
      owner: string,
      operator: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pfpStaker(overrides?: CallOverrides): Promise<BigNumber>;

    preLaunchSupply(overrides?: CallOverrides): Promise<BigNumber>;

    priceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    publicMintActive(overrides?: CallOverrides): Promise<BigNumber>;

    roundtableFactory(overrides?: CallOverrides): Promise<BigNumber>;

    roundtableRelay(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmblemWeaver(
      emblemWeaver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPfpStaker(
      pfpStaker_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPreLaunchSupply(
      supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicMintActive(
      setting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoundtableFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoundtableRelay(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShieldItemPrices(
      fieldPrices: BigNumberish[],
      hardwarePrices: BigNumberish[],
      framePrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShieldPassPrice(
      _shieldPassPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shieldHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shields(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleItemWhitelist(
      user: string,
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_ALL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildAndDropShields(
      receivers: string[],
      shieldBatch: {
        field: BigNumberish;
        hardware: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        frame: BigNumberish;
        colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        shieldHash: BytesLike;
        hardwareConfiguration: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buildShield(
      field: BigNumberish,
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      frame: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectERC20(
      erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emblemWeaver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintShieldPass(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noncesForAll(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permitAll(
      owner: string,
      operator: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pfpStaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preLaunchSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicMintActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundtableFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundtableRelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmblemWeaver(
      emblemWeaver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPfpStaker(
      pfpStaker_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPreLaunchSupply(
      supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicMintActive(
      setting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoundtableFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoundtableRelay(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShieldItemPrices(
      fieldPrices: BigNumberish[],
      hardwarePrices: BigNumberish[],
      framePrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShieldPassPrice(
      _shieldPassPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shieldHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shields(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleItemWhitelist(
      user: string,
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
