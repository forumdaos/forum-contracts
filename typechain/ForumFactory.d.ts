/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ForumFactoryInterface extends ethers.utils.Interface {
  functions: {
    "deployGroup(string,string,address[],uint32[4],address[])": FunctionFragment;
    "deployGroup2(string,string,address[],uint32[4],address[])": FunctionFragment;
    "executionManager()": FunctionFragment;
    "forumMaster()": FunctionFragment;
    "fundraiseExtension()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pfpStaker()": FunctionFragment;
    "setExecutionManager(address)": FunctionFragment;
    "setForumMaster(address)": FunctionFragment;
    "setFundraiseExtension(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPfpStaker(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployGroup",
    values: [
      string,
      string,
      string[],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployGroup2",
    values: [
      string,
      string,
      string[],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forumMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundraiseExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pfpStaker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setExecutionManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setForumMaster",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundraiseExtension",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPfpStaker",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployGroup2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forumMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundraiseExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pfpStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForumMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundraiseExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPfpStaker",
    data: BytesLike
  ): Result;

  events: {
    "GroupDeployed(address,string,string,address[],uint32[4])": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GroupDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export type GroupDeployedEvent = TypedEvent<
  [string, string, string, string[], [number, number, number, number]] & {
    forumGroup: string;
    name: string;
    symbol: string;
    voters: string[];
    govSettings: [number, number, number, number];
  }
>;

export type OwnerUpdatedEvent = TypedEvent<
  [string, string] & { user: string; newOwner: string }
>;

export class ForumFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ForumFactoryInterface;

  functions: {
    deployGroup(
      name_: string,
      symbol_: string,
      voters_: string[],
      govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      customExtensions_: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployGroup2(
      name_: string,
      symbol_: string,
      voters_: string[],
      govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      customExtensions_: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executionManager(overrides?: CallOverrides): Promise<[string]>;

    forumMaster(overrides?: CallOverrides): Promise<[string]>;

    fundraiseExtension(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pfpStaker(overrides?: CallOverrides): Promise<[string]>;

    setExecutionManager(
      executionManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForumMaster(
      forumMaster_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundraiseExtension(
      fundraiseExtension_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPfpStaker(
      pfpStaker_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deployGroup(
    name_: string,
    symbol_: string,
    voters_: string[],
    govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    customExtensions_: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployGroup2(
    name_: string,
    symbol_: string,
    voters_: string[],
    govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    customExtensions_: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executionManager(overrides?: CallOverrides): Promise<string>;

  forumMaster(overrides?: CallOverrides): Promise<string>;

  fundraiseExtension(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pfpStaker(overrides?: CallOverrides): Promise<string>;

  setExecutionManager(
    executionManager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForumMaster(
    forumMaster_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundraiseExtension(
    fundraiseExtension_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPfpStaker(
    pfpStaker_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployGroup(
      name_: string,
      symbol_: string,
      voters_: string[],
      govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      customExtensions_: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    deployGroup2(
      name_: string,
      symbol_: string,
      voters_: string[],
      govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      customExtensions_: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    executionManager(overrides?: CallOverrides): Promise<string>;

    forumMaster(overrides?: CallOverrides): Promise<string>;

    fundraiseExtension(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pfpStaker(overrides?: CallOverrides): Promise<string>;

    setExecutionManager(
      executionManager_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setForumMaster(
      forumMaster_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundraiseExtension(
      fundraiseExtension_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setPfpStaker(pfpStaker_: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "GroupDeployed(address,string,string,address[],uint32[4])"(
      forumGroup?: string | null,
      name?: null,
      symbol?: null,
      voters?: null,
      govSettings?: null
    ): TypedEventFilter<
      [string, string, string, string[], [number, number, number, number]],
      {
        forumGroup: string;
        name: string;
        symbol: string;
        voters: string[];
        govSettings: [number, number, number, number];
      }
    >;

    GroupDeployed(
      forumGroup?: string | null,
      name?: null,
      symbol?: null,
      voters?: null,
      govSettings?: null
    ): TypedEventFilter<
      [string, string, string, string[], [number, number, number, number]],
      {
        forumGroup: string;
        name: string;
        symbol: string;
        voters: string[];
        govSettings: [number, number, number, number];
      }
    >;

    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;
  };

  estimateGas: {
    deployGroup(
      name_: string,
      symbol_: string,
      voters_: string[],
      govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      customExtensions_: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployGroup2(
      name_: string,
      symbol_: string,
      voters_: string[],
      govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      customExtensions_: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executionManager(overrides?: CallOverrides): Promise<BigNumber>;

    forumMaster(overrides?: CallOverrides): Promise<BigNumber>;

    fundraiseExtension(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pfpStaker(overrides?: CallOverrides): Promise<BigNumber>;

    setExecutionManager(
      executionManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForumMaster(
      forumMaster_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundraiseExtension(
      fundraiseExtension_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPfpStaker(
      pfpStaker_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployGroup(
      name_: string,
      symbol_: string,
      voters_: string[],
      govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      customExtensions_: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployGroup2(
      name_: string,
      symbol_: string,
      voters_: string[],
      govSettings_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      customExtensions_: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forumMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundraiseExtension(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pfpStaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setExecutionManager(
      executionManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForumMaster(
      forumMaster_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundraiseExtension(
      fundraiseExtension_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPfpStaker(
      pfpStaker_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
