/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockSignerContractInterface extends ethers.utils.Interface {
  functions: {
    "_validateOrder((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32),bytes32,address)": FunctionFragment;
    "approveERC20ToBeSpent(address,address)": FunctionFragment;
    "approveERC721NFT(address,address)": FunctionFragment;
    "digest(bytes32)": FunctionFragment;
    "hash((bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "verify(address,bytes32,uint8,bytes32,bytes32,bytes32)": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
    "withdrawERC721NFT(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_validateOrder",
    values: [
      {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC20ToBeSpent",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC721NFT",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "digest", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [
      {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721NFT",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_validateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC20ToBeSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC721NFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "digest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721NFT",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export type OwnerUpdatedEvent = TypedEvent<
  [string, string] & { user: string; newOwner: string }
>;

export class MockSignerContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockSignerContractInterface;

  functions: {
    _validateOrder(
      makerOrder: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      orderHash: BytesLike,
      groupWallet: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    approveERC20ToBeSpent(
      token: string,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveERC721NFT(
      collection: string,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    digest(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { orderDigest: string }>;

    hash(
      makerOrder: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    isValidSignature(
      approvedHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      groupWallet: string,
      orderHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      domainSeparator: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawERC20(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721NFT(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _validateOrder(
    makerOrder: {
      isOrderAsk: boolean;
      signer: string;
      collection: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      strategy: string;
      currency: string;
      nonce: BigNumberish;
      startTime: BigNumberish;
      endTime: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    orderHash: BytesLike,
    groupWallet: string,
    overrides?: CallOverrides
  ): Promise<void>;

  approveERC20ToBeSpent(
    token: string,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveERC721NFT(
    collection: string,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  digest(orderHash: BytesLike, overrides?: CallOverrides): Promise<string>;

  hash(
    makerOrder: {
      isOrderAsk: boolean;
      signer: string;
      collection: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      strategy: string;
      currency: string;
      nonce: BigNumberish;
      startTime: BigNumberish;
      endTime: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  isValidSignature(
    approvedHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    groupWallet: string,
    orderHash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    domainSeparator: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawERC20(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721NFT(
    collection: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _validateOrder(
      makerOrder: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      orderHash: BytesLike,
      groupWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveERC20ToBeSpent(
      token: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveERC721NFT(
      collection: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    digest(orderHash: BytesLike, overrides?: CallOverrides): Promise<string>;

    hash(
      makerOrder: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    isValidSignature(
      approvedHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    verify(
      groupWallet: string,
      orderHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      domainSeparator: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawERC20(token: string, overrides?: CallOverrides): Promise<void>;

    withdrawERC721NFT(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;
  };

  estimateGas: {
    _validateOrder(
      makerOrder: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      orderHash: BytesLike,
      groupWallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveERC20ToBeSpent(
      token: string,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveERC721NFT(
      collection: string,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    digest(orderHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      makerOrder: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      approvedHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      groupWallet: string,
      orderHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      domainSeparator: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawERC20(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721NFT(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _validateOrder(
      makerOrder: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      orderHash: BytesLike,
      groupWallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveERC20ToBeSpent(
      token: string,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveERC721NFT(
      collection: string,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    digest(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      makerOrder: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      approvedHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      groupWallet: string,
      orderHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      domainSeparator: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721NFT(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
