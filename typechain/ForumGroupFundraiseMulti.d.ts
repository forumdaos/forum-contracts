/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";

interface ForumGroupFundraiseMultiInterface extends ethers.utils.Interface {
  functions: {
    "cancelFundraiseProposal(address,uint256,uint8)": FunctionFragment;
    "declineContribution(address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "fundContributors(address,uint256,address)": FunctionFragment;
    "fundraises(address,uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "releaseFundraiseProposal(address,uint256)": FunctionFragment;
    "releaseFundraiseProposalAndProcess(address,uint256)": FunctionFragment;
    "submitContribution(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "submitFundraiseProposal(address,string,uint32,uint32,address[],uint256[],bytes[],uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelFundraiseProposal",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "declineContribution",
    values: [string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundContributors",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundraises",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFundraiseProposal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFundraiseProposalAndProcess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitContribution",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitFundraiseProposal",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      BytesLike[],
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelFundraiseProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundraises", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseFundraiseProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFundraiseProposalAndProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitFundraiseProposal",
    data: BytesLike
  ): Result;

  events: {
    "FundraiseProposalCancelled(address,uint256,uint8)": EventFragment;
    "FundraiseProposalReleased(address,uint256)": EventFragment;
    "NewFundraiseContribution(address,address,uint256,address,uint256)": EventFragment;
    "NewFundraiseProposal(address,address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundraiseProposalCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundraiseProposalReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFundraiseContribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFundraiseProposal"): EventFragment;
}

export type FundraiseProposalCancelledEvent = TypedEvent<
  [string, BigNumber, number] & {
    dao: string;
    proposal: BigNumber;
    reason: number;
  }
>;

export type FundraiseProposalReleasedEvent = TypedEvent<
  [string, BigNumber] & { dao: string; proposal: BigNumber }
>;

export type NewFundraiseContributionEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    dao: string;
    contributor: string;
    proposal: BigNumber;
    asset: string;
    value: BigNumber;
  }
>;

export type NewFundraiseProposalEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    dao: string;
    proposer: string;
    proposal: BigNumber;
    asset: string;
    value: BigNumber;
  }
>;

export class ForumGroupFundraiseMulti extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ForumGroupFundraiseMultiInterface;

  functions: {
    cancelFundraiseProposal(
      dao: string,
      proposal: BigNumberish,
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    declineContribution(
      dao: string,
      proposal: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundContributors(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fundraises(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        asset: string;
        deadline: number;
        votersRemaining: number;
        firstRound: boolean;
        roundValue: BigNumber;
        target: BigNumber;
        raised: BigNumber;
      }
    >;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseFundraiseProposal(
      dao: string,
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseFundraiseProposalAndProcess(
      dao: string,
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitContribution(
      dao: string,
      proposal: BigNumberish,
      value: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitFundraiseProposal(
      dao: string,
      description: string,
      deadline: BigNumberish,
      votersRemaining: BigNumberish,
      accounts: string[],
      amounts: BigNumberish[],
      payloads: BytesLike[],
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelFundraiseProposal(
    dao: string,
    proposal: BigNumberish,
    reason: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  declineContribution(
    dao: string,
    proposal: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundContributors(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fundraises(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      asset: string;
      deadline: number;
      votersRemaining: number;
      firstRound: boolean;
      roundValue: BigNumber;
      target: BigNumber;
      raised: BigNumber;
    }
  >;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseFundraiseProposal(
    dao: string,
    proposal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseFundraiseProposalAndProcess(
    dao: string,
    proposal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitContribution(
    dao: string,
    proposal: BigNumberish,
    value: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitFundraiseProposal(
    dao: string,
    description: string,
    deadline: BigNumberish,
    votersRemaining: BigNumberish,
    accounts: string[],
    amounts: BigNumberish[],
    payloads: BytesLike[],
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelFundraiseProposal(
      dao: string,
      proposal: BigNumberish,
      reason: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    declineContribution(
      dao: string,
      proposal: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fundContributors(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fundraises(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        asset: string;
        deadline: number;
        votersRemaining: number;
        firstRound: boolean;
        roundValue: BigNumber;
        target: BigNumber;
        raised: BigNumber;
      }
    >;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    releaseFundraiseProposal(
      dao: string,
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseFundraiseProposalAndProcess(
      dao: string,
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitContribution(
      dao: string,
      proposal: BigNumberish,
      value: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitFundraiseProposal(
      dao: string,
      description: string,
      deadline: BigNumberish,
      votersRemaining: BigNumberish,
      accounts: string[],
      amounts: BigNumberish[],
      payloads: BytesLike[],
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FundraiseProposalCancelled(address,uint256,uint8)"(
      dao?: string | null,
      proposal?: BigNumberish | null,
      reason?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { dao: string; proposal: BigNumber; reason: number }
    >;

    FundraiseProposalCancelled(
      dao?: string | null,
      proposal?: BigNumberish | null,
      reason?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { dao: string; proposal: BigNumber; reason: number }
    >;

    "FundraiseProposalReleased(address,uint256)"(
      dao?: string | null,
      proposal?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { dao: string; proposal: BigNumber }
    >;

    FundraiseProposalReleased(
      dao?: string | null,
      proposal?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { dao: string; proposal: BigNumber }
    >;

    "NewFundraiseContribution(address,address,uint256,address,uint256)"(
      dao?: string | null,
      contributor?: string | null,
      proposal?: BigNumberish | null,
      asset?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        dao: string;
        contributor: string;
        proposal: BigNumber;
        asset: string;
        value: BigNumber;
      }
    >;

    NewFundraiseContribution(
      dao?: string | null,
      contributor?: string | null,
      proposal?: BigNumberish | null,
      asset?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        dao: string;
        contributor: string;
        proposal: BigNumber;
        asset: string;
        value: BigNumber;
      }
    >;

    "NewFundraiseProposal(address,address,uint256,address,uint256)"(
      dao?: string | null,
      proposer?: string | null,
      proposal?: BigNumberish | null,
      asset?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        dao: string;
        proposer: string;
        proposal: BigNumber;
        asset: string;
        value: BigNumber;
      }
    >;

    NewFundraiseProposal(
      dao?: string | null,
      proposer?: string | null,
      proposal?: BigNumberish | null,
      asset?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        dao: string;
        proposer: string;
        proposal: BigNumber;
        asset: string;
        value: BigNumber;
      }
    >;
  };

  estimateGas: {
    cancelFundraiseProposal(
      dao: string,
      proposal: BigNumberish,
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    declineContribution(
      dao: string,
      proposal: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundContributors(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundraises(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseFundraiseProposal(
      dao: string,
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseFundraiseProposalAndProcess(
      dao: string,
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitContribution(
      dao: string,
      proposal: BigNumberish,
      value: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitFundraiseProposal(
      dao: string,
      description: string,
      deadline: BigNumberish,
      votersRemaining: BigNumberish,
      accounts: string[],
      amounts: BigNumberish[],
      payloads: BytesLike[],
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelFundraiseProposal(
      dao: string,
      proposal: BigNumberish,
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    declineContribution(
      dao: string,
      proposal: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundContributors(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundraises(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseFundraiseProposal(
      dao: string,
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseFundraiseProposalAndProcess(
      dao: string,
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitContribution(
      dao: string,
      proposal: BigNumberish,
      value: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitFundraiseProposal(
      dao: string,
      description: string,
      deadline: BigNumberish,
      votersRemaining: BigNumberish,
      accounts: string[],
      amounts: BigNumberish[],
      payloads: BytesLike[],
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
