/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";

interface FrameSVGs2Interface extends ethers.utils.Interface {
  functions: {
    "frame_4()": FunctionFragment;
    "frame_5()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "frame_4", values?: undefined): string;
  encodeFunctionData(functionFragment: "frame_5", values?: undefined): string;

  decodeFunctionResult(functionFragment: "frame_4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frame_5", data: BytesLike): Result;

  events: {};
}

export class FrameSVGs2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FrameSVGs2Interface;

  functions: {
    frame_4(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, string] & {
          title: string;
          frameType: number;
          svgString: string;
        }
      ]
    >;

    frame_5(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, string] & {
          title: string;
          frameType: number;
          svgString: string;
        }
      ]
    >;
  };

  frame_4(
    overrides?: CallOverrides
  ): Promise<
    [string, number, string] & {
      title: string;
      frameType: number;
      svgString: string;
    }
  >;

  frame_5(
    overrides?: CallOverrides
  ): Promise<
    [string, number, string] & {
      title: string;
      frameType: number;
      svgString: string;
    }
  >;

  callStatic: {
    frame_4(
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & {
        title: string;
        frameType: number;
        svgString: string;
      }
    >;

    frame_5(
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & {
        title: string;
        frameType: number;
        svgString: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    frame_4(overrides?: CallOverrides): Promise<BigNumber>;

    frame_5(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    frame_4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frame_5(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
