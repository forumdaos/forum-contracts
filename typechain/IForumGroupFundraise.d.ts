/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";

interface IForumGroupFundraiseInterface extends ethers.utils.Interface {
  functions: {
    "burnShares(address,uint256)": FunctionFragment;
    "cancelProposal(uint256)": FunctionFragment;
    "mintShares(address,uint256)": FunctionFragment;
    "processProposal(uint256)": FunctionFragment;
    "proposalStates(uint256)": FunctionFragment;
    "propose(uint8,string,address[],uint256[],bytes[],uint32)": FunctionFragment;
    "shieldOf(address)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
    "voteBySig(address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnShares",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintShares",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalStates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      BigNumberish,
      string,
      string[],
      BigNumberish[],
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "shieldOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "voteBySig",
    values: [string, BigNumberish, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "burnShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shieldOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteBySig", data: BytesLike): Result;

  events: {};
}

export class IForumGroupFundraise extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IForumGroupFundraiseInterface;

  functions: {
    burnShares(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelProposal(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintShares(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processProposal(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposalStates(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[boolean, boolean] & { passed: boolean; processed: boolean }]>;

    propose(
      proposalType: BigNumberish,
      description: string,
      accounts: string[],
      amounts: BigNumberish[],
      payloads: BytesLike[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shieldOf(
      member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    vote(
      proposal: BigNumberish,
      approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteBySig(
      signer: string,
      proposal: BigNumberish,
      approve: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnShares(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelProposal(
    proposal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintShares(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processProposal(
    proposal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposalStates(
    proposal: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { passed: boolean; processed: boolean }>;

  propose(
    proposalType: BigNumberish,
    description: string,
    accounts: string[],
    amounts: BigNumberish[],
    payloads: BytesLike[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shieldOf(member: string, overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    proposal: BigNumberish,
    approve: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteBySig(
    signer: string,
    proposal: BigNumberish,
    approve: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnShares(
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelProposal(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintShares(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processProposal(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[]] & { didProposalPass: boolean; results: string[] }
    >;

    proposalStates(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { passed: boolean; processed: boolean }>;

    propose(
      proposalType: BigNumberish,
      description: string,
      accounts: string[],
      amounts: BigNumberish[],
      payloads: BytesLike[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shieldOf(member: string, overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposal: BigNumberish,
      approve: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    voteBySig(
      signer: string,
      proposal: BigNumberish,
      approve: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burnShares(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelProposal(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintShares(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processProposal(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposalStates(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      proposalType: BigNumberish,
      description: string,
      accounts: string[],
      amounts: BigNumberish[],
      payloads: BytesLike[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shieldOf(member: string, overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposal: BigNumberish,
      approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteBySig(
      signer: string,
      proposal: BigNumberish,
      approve: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnShares(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintShares(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processProposal(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposalStates(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      proposalType: BigNumberish,
      description: string,
      accounts: string[],
      amounts: BigNumberish[],
      payloads: BytesLike[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shieldOf(
      member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      proposal: BigNumberish,
      approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteBySig(
      signer: string,
      proposal: BigNumberish,
      approve: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
