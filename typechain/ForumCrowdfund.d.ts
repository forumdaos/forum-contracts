/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ForumCrowdfundInterface extends ethers.utils.Interface {
  functions: {
    "contributionTracker(address,address)": FunctionFragment;
    "getCrowdfund(bytes32)": FunctionFragment;
    "initiateCrowdfund(address,address,uint256,uint32,bytes32,bytes32,bytes)": FunctionFragment;
    "submitContribution(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "contributionTracker",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrowdfund",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateCrowdfund",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitContribution",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "contributionTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitContribution",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(bytes32)": EventFragment;
    "FundsAdded(bytes32,address,uint256)": EventFragment;
    "NewCrowdfund(bytes32,bytes32,address,uint256,uint32)": EventFragment;
    "Processed(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCrowdfund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Processed"): EventFragment;
}

export type CancelledEvent = TypedEvent<[string] & { groupName: string }>;

export type FundsAddedEvent = TypedEvent<
  [string, string, BigNumber] & {
    groupName: string;
    contributor: string;
    contribution: BigNumber;
  }
>;

export type NewCrowdfundEvent = TypedEvent<
  [string, string, string, BigNumber, number] & {
    groupName: string;
    symbol: string;
    proposer: string;
    targetPrice: BigNumber;
    deadline: number;
  }
>;

export type ProcessedEvent = TypedEvent<
  [string, string] & { groupName: string; groupAddress: string }
>;

export class ForumCrowdfund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ForumCrowdfundInterface;

  functions: {
    contributionTracker(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCrowdfund(
      groupName: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          number,
          string,
          string,
          string
        ] & {
          targetContract: string;
          contributors: string[];
          contributions: BigNumber[];
          targetPrice: BigNumber;
          deadline: number;
          groupName: string;
          symbol: string;
          payload: string;
        }
      ] & {
        crowdfundDetails: [
          string,
          string[],
          BigNumber[],
          BigNumber,
          number,
          string,
          string,
          string
        ] & {
          targetContract: string;
          contributors: string[];
          contributions: BigNumber[];
          targetPrice: BigNumber;
          deadline: number;
          groupName: string;
          symbol: string;
          payload: string;
        };
      }
    >;

    initiateCrowdfund(
      creator: string,
      targetContract: string,
      targetPrice: BigNumberish,
      deadline: BigNumberish,
      groupName: BytesLike,
      symbol: BytesLike,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitContribution(
      groupName: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  contributionTracker(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCrowdfund(
    groupName: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string[],
      BigNumber[],
      BigNumber,
      number,
      string,
      string,
      string
    ] & {
      targetContract: string;
      contributors: string[];
      contributions: BigNumber[];
      targetPrice: BigNumber;
      deadline: number;
      groupName: string;
      symbol: string;
      payload: string;
    }
  >;

  initiateCrowdfund(
    creator: string,
    targetContract: string,
    targetPrice: BigNumberish,
    deadline: BigNumberish,
    groupName: BytesLike,
    symbol: BytesLike,
    payload: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitContribution(
    groupName: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contributionTracker(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCrowdfund(
      groupName: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        number,
        string,
        string,
        string
      ] & {
        targetContract: string;
        contributors: string[];
        contributions: BigNumber[];
        targetPrice: BigNumber;
        deadline: number;
        groupName: string;
        symbol: string;
        payload: string;
      }
    >;

    initiateCrowdfund(
      creator: string,
      targetContract: string,
      targetPrice: BigNumberish,
      deadline: BigNumberish,
      groupName: BytesLike,
      symbol: BytesLike,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitContribution(
      groupName: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Cancelled(bytes32)"(
      groupName?: BytesLike | null
    ): TypedEventFilter<[string], { groupName: string }>;

    Cancelled(
      groupName?: BytesLike | null
    ): TypedEventFilter<[string], { groupName: string }>;

    "FundsAdded(bytes32,address,uint256)"(
      groupName?: BytesLike | null,
      contributor?: null,
      contribution?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { groupName: string; contributor: string; contribution: BigNumber }
    >;

    FundsAdded(
      groupName?: BytesLike | null,
      contributor?: null,
      contribution?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { groupName: string; contributor: string; contribution: BigNumber }
    >;

    "NewCrowdfund(bytes32,bytes32,address,uint256,uint32)"(
      groupName?: BytesLike | null,
      symbol?: null,
      proposer?: null,
      targetPrice?: null,
      deadline?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        groupName: string;
        symbol: string;
        proposer: string;
        targetPrice: BigNumber;
        deadline: number;
      }
    >;

    NewCrowdfund(
      groupName?: BytesLike | null,
      symbol?: null,
      proposer?: null,
      targetPrice?: null,
      deadline?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        groupName: string;
        symbol: string;
        proposer: string;
        targetPrice: BigNumber;
        deadline: number;
      }
    >;

    "Processed(bytes32,address)"(
      groupName?: BytesLike | null,
      groupAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { groupName: string; groupAddress: string }
    >;

    Processed(
      groupName?: BytesLike | null,
      groupAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { groupName: string; groupAddress: string }
    >;
  };

  estimateGas: {
    contributionTracker(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCrowdfund(
      groupName: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateCrowdfund(
      creator: string,
      targetContract: string,
      targetPrice: BigNumberish,
      deadline: BigNumberish,
      groupName: BytesLike,
      symbol: BytesLike,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitContribution(
      groupName: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contributionTracker(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCrowdfund(
      groupName: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateCrowdfund(
      creator: string,
      targetContract: string,
      targetPrice: BigNumberish,
      deadline: BigNumberish,
      groupName: BytesLike,
      symbol: BytesLike,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitContribution(
      groupName: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
