/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IShieldManagerInterface extends ethers.utils.Interface {
  functions: {
    "buildShield(uint16,uint16[9],uint16,uint24[4],uint256)": FunctionFragment;
    "mintShieldPass(address)": FunctionFragment;
    "shields(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buildShield",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintShieldPass",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shields",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buildShield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintShieldPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shields", data: BytesLike): Result;

  events: {};
}

export class IShieldManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IShieldManagerInterface;

  functions: {
    buildShield(
      field: BigNumberish,
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      frame: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintShieldPass(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shields(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        number,
        number,
        number,
        number,
        number
      ] & {
        field: number;
        hardware: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        frame: number;
        color1: number;
        color2: number;
        color3: number;
        color4: number;
      }
    >;
  };

  buildShield(
    field: BigNumberish,
    hardware: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    frame: BigNumberish,
    colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintShieldPass(
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shields(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      [number, number, number, number, number, number, number, number, number],
      number,
      number,
      number,
      number,
      number
    ] & {
      field: number;
      hardware: [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ];
      frame: number;
      color1: number;
      color2: number;
      color3: number;
      color4: number;
    }
  >;

  callStatic: {
    buildShield(
      field: BigNumberish,
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      frame: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintShieldPass(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    shields(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        number,
        number,
        number,
        number,
        number
      ] & {
        field: number;
        hardware: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        frame: number;
        color1: number;
        color2: number;
        color3: number;
        color4: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    buildShield(
      field: BigNumberish,
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      frame: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintShieldPass(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shields(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buildShield(
      field: BigNumberish,
      hardware: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      frame: BigNumberish,
      colors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintShieldPass(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shields(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
